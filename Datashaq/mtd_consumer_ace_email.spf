<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>bi-test</string>
			<key>host</key>
			<string>datashack.production.thegrommet.com</string>
			<key>kcid</key>
			<string>-6998448571925772934</string>
			<key>name</key>
			<string>Datashaq</string>
			<key>port</key>
			<integer>3306</integer>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>juliane</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>latin1</string>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClRkYXRl0h4fLS5fEA9O
			U011dGFibGVTdHJpbmejLS8jWE5TU3RyaW5n0h4fMTJeTlNNdXRh
			YmxlQXJyYXmjMTMjV05TQXJyYXnSHh8iNaIiI18QD05TS2V5ZWRB
			cmNoaXZlctE4OVRkYXRhgAEACAARABoAIwAtADIANwBFAEsAUgBa
			AGUAbABwAHIAdAB2AHoAfAB+AIAAggCHAIwAkQC6AMEAwgDDAMUA
			ygDVAN4A9AD4AQUBDgETARUBFwEZAR4BKAEqAS8BNAFGAUoBUwFY
			AWcBawFzAXgBewGNAZABlQAAAAAAAAIBAAAAAAAAADoAAAAAAAAA
			AAAAAAAAAAGX
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1036, 529}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>DELIMITER ;;

#1 Drop table
drop table mtd_consumer_ace_email
;;

#2 Create Staging Table
CREATE TABLE IF NOT EXISTS mtd_consumer_ace_email (
	year YEAR NOT NULL,
	month DECIMAL(12,0) NOT NULL,
	consumer_rev DECIMAL(12,0) NOT NULL,
	yoy DECIMAL(12,2) NOT NULL,
	consumer_budget DECIMAL(12,0) NOT NULL,
	percent_of_budget DECIMAL(12,2) NOT NULL,
	aov DECIMAL(12,2) NOT NULL,
	orders DECIMAL(12,0) NOT NULL,
	product_margin DECIMAL(12,2),
	weighted_margin DECIMAL(12,2),
	unique Key uk_year_month(year,month)
	)
;;

CREATE PROCEDURE mtd_consumer_ace_email()
BEGIN

#3 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(
				year,
				month,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year
;

END ;;









</string>
			<key>table</key>
			<string>daily_consumer_ace_email</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>258</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>#1 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(
				as_of_date,
				year,
				month,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		CURDATE() - 1,
			dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#1 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(
				as_of_date,
				year,
				month,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		CURDATE() - 1
			dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS mtd_consumer_ace_email (
	as_of_date DATE PRIMARY KEY,
	year YEAR NOT NULL,
	month DECIMAL(12,0) NOT NULL,
	consumer_rev DECIMAL(12,0) NOT NULL,
	yoy DECIMAL(12,2) NOT NULL,
	consumer_budget DECIMAL(12,0) NOT NULL,
	percent_of_budget DECIMAL(12,2) NOT NULL,
	aov DECIMAL(12,2) NOT NULL,
	orders DECIMAL(12,0) NOT NULL,
	product_margin DECIMAL(12,2),
	weighted_margin DECIMAL(12,2)
	)</string>
		<string>#1 Drop table
drop table mtd_consumer_ace_email</string>
		<string>#1 Replace data into ytd_consumer_ace_email table
REPLACE INTO 	ytd_consumer_ace_email(
				as_of_date,
				year,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		CURDATE() - 1,
			dd.year,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)					AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.year = year(o.created_at) - 1
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.year = year(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d) dd
JOIN			

(SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm) mar ON mar.year = dd.year</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS ytd_consumer_ace_email (
	as_of_date DATE NOT NULL PRIMARY KEY,
	year YEAR NOT NULL,
	consumer_rev DECIMAL(12,0) NOT NULL,
	yoy DECIMAL(12,2) NOT NULL,
	consumer_budget DECIMAL(12,0) NOT NULL,
	percent_of_budget DECIMAL(12,2) NOT NULL,
	aov DECIMAL(12,2) NOT NULL,
	orders DECIMAL(12,0) NOT NULL,
	product_margin DECIMAL(12,2),
	weighted_margin DECIMAL(12,2)
	)</string>
		<string>#1 Drop table
drop table ytd_consumer_ace_email</string>
		<string>#1 Replace data into ytd_consumer_ace_email table
REPLACE INTO 	ytd_consumer_ace_email(
				year,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		dd.year,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)					AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.year = year(o.created_at) - 1
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.year = year(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d) dd
JOIN			

(SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm) mar ON mar.year = dd.year</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS ytd_consumer_ace_email (
	year YEAR NOT NULL PRIMARY KEY,
	consumer_rev DECIMAL(12,0) NOT NULL,
	yoy DECIMAL(12,2) NOT NULL,
	consumer_budget DECIMAL(12,0) NOT NULL,
	percent_of_budget DECIMAL(12,2) NOT NULL,
	aov DECIMAL(12,2) NOT NULL,
	orders DECIMAL(12,0) NOT NULL,
	product_margin DECIMAL(12,2),
	weighted_margin DECIMAL(12,2)
	)</string>
		<string>SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.year = year(o.created_at) - 1
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.year = year(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d</string>
		<string>SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.year = year(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.year = year(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d</string>
		<string>SELECT		dd.year,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.year = year(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.year = year(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d) dd
JOIN			

(SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm) mar ON mar.year = dd.year</string>
		<string>SELECT		dd.year,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.year = year(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d) dd
JOIN			

(SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm) mar ON mar.year = dd.year</string>
		<string>SELECT		dd.year,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		year(budget_date) as year,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d) dd
JOIN			

(SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm) mar ON mar.year = dd.year</string>
		<string>SELECT		dd.year,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d) dd
JOIN			

(SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm) mar ON mar.year = dd.year</string>
		<string>SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year) d</string>
		<string>SELECT		COALESCE(d.year) as year,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-01-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
						GROUP BY	year) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-01-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	year</string>
		<string>SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-01-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year) mm</string>
		<string>SELECT		mm.year,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	year, cpf.sku) m
			GROUP BY	year</string>
		<string>#1 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(
				year,
				month,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.consumer_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#1 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(
				year,
				month,
				consumer_rev,
				yoy,
				consumer_budget,
				percent_of_budget,
				aov,
				orders,
				product_margin,
				weighted_margin)
	
SELECT		dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS mtd_consumer_ace_email (
	year YEAR NOT NULL,
	month DECIMAL(12,0) NOT NULL,
	consumer_rev DECIMAL(12,0) NOT NULL,
	yoy DECIMAL(12,2) NOT NULL,
	consumer_budget DECIMAL(12,0) NOT NULL,
	percent_of_budget DECIMAL(12,2) NOT NULL,
	aov DECIMAL(12,2) NOT NULL,
	orders DECIMAL(12,0) NOT NULL,
	product_margin DECIMAL(12,2),
	weighted_margin DECIMAL(12,2),
	unique Key uk_year_month(year,month)
	)</string>
		<string>#1 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)
	
SELECT		dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#1 Replace data into mtd_consumer_ace_email table
REPLACE INTO 	mtd_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)
	
SELECT		dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS mtd_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev DECIMAL(12,0) NOT NULL,
	yoy DECIMAL(12,2) NOT NULL,
	consumer_budget DECIMAL(12,0) NOT NULL,
	percent_of_budget DECIMAL(12,2) NOT NULL,
	aov DECIMAL(12,2) NOT NULL,
	orders DECIMAL(12,0) NOT NULL,
	product_margin DECIMAL(12,2),
	weighted_margin DECIMAL(12,2)
	)</string>
		<string>SELECT		dd.year,
			dd.month,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>SELECT		dd.date,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm</string>
		<string>SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>#1 Replace data into monthly_consumer_ace_email table
REPLACE INTO 	monthly_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)
	
SELECT		dd.date,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d) dd
JOIN			

(SELECT		mm.year,
			mm.month,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.year,
						m.month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	year(soia.created_at) as year,
									month(soia.created_at) as month,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	month, year, cpf.sku) m
			GROUP BY	month, year)mm) mar ON mar.month = dd.month and mar.year = dd.year</string>
		<string>SELECT		COALESCE(d.year) as year,
			COALESCE(d.month) as month,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.consumer_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.consumer_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	year(o.created_at) AS year,
						month(o.created_at) AS month,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev as py_consumer_rev,
         				b.cs_budget as consumer_budget,
         				AVG((o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				(m.avg_full_weighted_margin * 100) as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		year(o.created_at) AS year,
									month(o.created_at) AS month,
         							SUM(IF(store_id = 1, (base_subtotal + base_shipping_amount - abs(base_discount_amount - base_gift_cards_amount)) * 0.97, 0)) AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	date(o.created_at) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 365 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	month, year) py ON py.month = month(o.created_at)
			LEFT JOIN	(SELECT		year(soia.period) as year,
									month(soia.period) as month,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	month, year) m ON m.month = month(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	(SELECT		MONTH(budget_date) as month,
									SUM(cs_budget) as cs_budget
						FROM		2018_daily_budget 
						WHERE     	date(budget_date) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
						GROUP BY	month) b ON b.month = month(o.created_at)
			WHERE     	date(o.created_at) BETWEEN DATE_FORMAT((CURDATE()-1),'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	month, year) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)
	
SELECT		dd.date,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.date) as date,
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d) dd
JOIN			

(SELECT		mm.date,
			FORMAT((1-(mm.cost/mm.rev))*100,2) as product_margin,
			FORMAT((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.date,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	date)mm) mar ON mar.date = dd.date</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS daily_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev VARCHAR(128) NOT NULL,
	yoy VARCHAR(128) NOT NULL,
	consumer_budget VARCHAR(128) NOT NULL,
	percent_of_budget VARCHAR(128) NOT NULL,
	aov VARCHAR(128) NOT NULL,
	orders VARCHAR(128) NOT NULL,
	product_margin VARCHAR(128),
	weighted_margin VARCHAR(128)
	)</string>
		<string>#1 Drop table
drop table daily_consumer_ace_email</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)
	
SELECT		dd.date,
			dd.consumer_rev,
			dd.yoy,
			dd.consumer_budget,
			dd.percent_of_budget,
			dd.aov,
			dd.orders,
			mar.product_margin,
			mar.weighted_margin
FROM			
(SELECT		COALESCE(d.date) as date,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.cs_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d) dd
JOIN			

(SELECT		mm.date,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		m.date,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									SUBSTRING(cpf.sku,1,LOCATE('-',cpf.sku)-1) as sku_prefix,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		magento.sales_flat_order_item soia
						LEFT JOIN	magento.sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			so.status != 'canceled'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	date)mm) mar ON mar.date = dd.date</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		COALESCE(d.date) as date,
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.cs_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders,
			0 as product_margin,
			0 as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>SELECT		COALESCE(d.date),
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.cs_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders,
			0 as product_margin,
			0 as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		COALESCE(d.date),
			COALESCE(ROUND(d.consumer_rev,0)) as consumer_rev,
			COALESCE(ROUND(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(ROUND(d.cs_budget,0)) as consumer_budget,
			COALESCE(ROUND(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(ROUND(d.net_aov,2)) as aov,
			COALESCE(ROUND(d.orders,0)) as orders,
			0 as product_margin,
			0 as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS daily_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev DECIMAL NOT NULL,
	yoy DECIMAL NOT NULL,
	consumer_budget DECIMAL NOT NULL,
	percent_of_budget DECIMAL NOT NULL,
	aov DECIMAL NOT NULL,
	orders DECIMAL NOT NULL,
	product_margin DECIMAL,
	weighted_margin DECIMAL
	)</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders/*,
	product_margin,
	weighted_margin*/)

SELECT		COALESCE(d.date),
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders/*,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as product_margin,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as weighted_margin*/
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders/*,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin*/
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			/*LEFT JOIN	(SELECT		DATE(soia.period) as date,
									COALESCE(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price)))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link 
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info 
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)*/
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS daily_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev VARCHAR(128) NOT NULL,
	yoy VARCHAR(128) NOT NULL,
	consumer_budget VARCHAR(128) NOT NULL,
	percent_of_budget VARCHAR(128) NOT NULL,
	aov VARCHAR(128) NOT NULL,
	orders VARCHAR(128) NOT NULL/*,
	product_margin DECIMAL,
	weighted_margin DECIMAL*/
	)</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS daily_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev VARCHAR(128) NOT NULL,
	yoy DECIMAL NOT NULL,
	consumer_budget DECIMAL NOT NULL,
	percent_of_budget DECIMAL NOT NULL,
	aov DECIMAL NOT NULL,
	orders DECIMAL NOT NULL/*,
	product_margin DECIMAL,
	weighted_margin DECIMAL*/
	)</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		COALESCE(d.date),
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders/*,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as product_margin,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as weighted_margin*/
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders/*,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin*/
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			/*LEFT JOIN	(SELECT		DATE(soia.period) as date,
									COALESCE(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price)))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link 
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info 
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)*/
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS daily_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev DECIMAL NOT NULL,
	yoy DECIMAL NOT NULL,
	consumer_budget DECIMAL NOT NULL,
	percent_of_budget DECIMAL NOT NULL,
	aov DECIMAL NOT NULL,
	orders DECIMAL NOT NULL/*,
	product_margin DECIMAL,
	weighted_margin DECIMAL*/
	)</string>
		<string>#1 Replace data into daily_consumer_ace_email table
/*REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)*/

SELECT		COALESCE(d.date),
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as product_margin,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									COALESCE(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price)))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		COALESCE(d.date),
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as product_margin,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									COALESCE(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price)))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		COALESCE(d.date),
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as product_margin,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									COALAESCE(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price)))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		COALESCE(d.date),
			COALESCE(FORMAT(d.consumer_rev,0)) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			COALESCE(FORMAT(d.cs_budget,0)) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			COALESCE(FORMAT(d.net_aov,2)) as aov,
			COALESCE(FORMAT(d.orders,0)) as orders,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as product_margin,
			COALESCE(FORMAT(d.avg_full_weighted_margin,2)) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		d.date,
			FORMAT(d.consumer_rev,0) as consumer_rev,
			NULLIF(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			FORMAT(d.cs_budget,0) as consumer_budget,
			NULLIF(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			FORMAT(d.net_aov,2) as aov,
			FORMAT(d.orders,0) as orders,
			FORMAT(d.avg_full_weighted_margin,2) as product_margin,
			FORMAT(d.avg_full_weighted_margin,2) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		d.date,
			FORMAT(d.consumer_rev,0) as consumer_rev,
			COALESCE(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2)) as YOY,
			FORMAT(d.cs_budget,0) as consumer_budget,
			COALESCE(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2)) as percent_of_budget,
			FORMAT(d.net_aov,2) as aov,
			FORMAT(d.orders,0) as orders,
			FORMAT(d.avg_full_weighted_margin,2) as product_margin,
			FORMAT(d.avg_full_weighted_margin,2) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
/*REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)*/

SELECT		d.date,
			FORMAT(d.consumer_rev,0) as consumer_rev,
			FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2) as YOY,
			FORMAT(d.cs_budget,0) as consumer_budget,
			FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2) as percent_of_budget,
			FORMAT(d.net_aov,2) as aov,
			FORMAT(d.orders,0) as orders,
			FORMAT(d.avg_full_weighted_margin,2) as product_margin,
			FORMAT(d.avg_full_weighted_margin,2) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		d.date,
			FORMAT(d.consumer_rev,0) as consumer_rev,
			FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2) as YOY,
			FORMAT(d.cs_budget,0) as consumer_budget,
			FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2) as percent_of_budget,
			FORMAT(d.net_aov,2) as aov,
			FORMAT(d.orders,0) as orders,
			FORMAT(d.avg_full_weighted_margin,2) as product_margin,
			FORMAT(d.avg_full_weighted_margin,2) as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#1 Replace data into daily_consumer_ace_email table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		d.date,
			CONCAT('$',FORMAT(d.consumer_rev,0)) as consumer_rev,
			CONCAT(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2),'%') as YOY,
			CONCAT('$',FORMAT(d.cs_budget,0)) as consumer_budget,
			CONCAT(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2),'%') as percent_of_budget,
			CONCAT('$',FORMAT(d.net_aov,2)) as aov,
			FORMAT(d.orders,0) as orders,
			CONCAT(FORMAT(d.avg_full_weighted_margin,2),'%') as product_margin,
			CONCAT(FORMAT(d.avg_full_weighted_margin,2),'%') as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#Actual Table - Only needed to run this at creation
/*CREATE TABLE IF NOT EXISTS calendar (
	email_num INTEGER NOT NULL,
	email_date DATE NOT NULL,
	position INTEGER NOT NULL,
	sku_prefix VARCHAR(128) NOT NULL,
	spot VARCHAR(128),
	content_direction VARCHAR(128), 
	high_level_campaign VARCHAR(128),
	promotional_pricing VARCHAR(128),
	grommet_name VARCHAR(128),
	refreshed_at TIMESTAMP,
	product_id INTEGER,
	unique Key uk_email_date_pos(email_num, email_date, position)
	);*/

#1 Replace data into calendar table
REPLACE INTO 	daily_consumer_ace_email(date,
	consumer_rev,
	yoy,
	consumer_budget,
	percent_of_budget,
	aov,
	orders,
	product_margin,
	weighted_margin)

SELECT		d.date,
			CONCAT('$',FORMAT(d.consumer_rev,0)) as consumer_rev,
			CONCAT(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2),'%') as YOY,
			CONCAT('$',FORMAT(d.cs_budget,0)) as consumer_budget,
			CONCAT(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2),'%') as percent_of_budget,
			CONCAT('$',FORMAT(d.net_aov,2)) as aov,
			FORMAT(d.orders,0) as orders,
			CONCAT(FORMAT(d.avg_full_weighted_margin,2),'%') as product_margin,
			CONCAT(FORMAT(d.avg_full_weighted_margin,2),'%') as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>#2 Create Staging Table
CREATE TABLE IF NOT EXISTS daily_consumer_ace_email (
	date DATE NOT NULL PRIMARY KEY,
	consumer_rev DECIMAL NOT NULL,
	yoy DECIMAL NOT NULL,
	consumer_budget DECIMAL NOT NULL,
	percent_of_budget DECIMAL NOT NULL,
	aov DECIMAL NOT NULL,
	orders DECIMAL NOT NULL,
	product_margin DECIMAL NOT NULL,
	weighted_margin DECIMAL NOT NULL
	)</string>
		<string>#Consumer Summary - Daily -- DONE except margin
SELECT		d.date,
			CONCAT('$',FORMAT(d.consumer_rev,0)) as consumer_rev,
			CONCAT(FORMAT(((d.consumer_rev - d.py_consumer_rev) / d.py_consumer_rev) * 100, 2),'%') as YOY,
			CONCAT('$',FORMAT(d.cs_budget,0)) as consumer_budget,
			CONCAT(FORMAT(((d.consumer_rev / d.cs_budget) - 1) * 100,2),'%') as percent_of_budget,
			CONCAT('$',FORMAT(d.net_aov,2)) as aov,
			FORMAT(d.orders,0) as orders,
			CONCAT(FORMAT(d.avg_full_weighted_margin,2),'%') as product_margin,
			CONCAT(FORMAT(d.avg_full_weighted_margin,2),'%') as weighted_margin
FROM 		(SELECT    	DAYOFYEAR(DATE(o.created_at)) as day_of_year,
						DATE(o.created_at) AS DATE,
         				(SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS consumer_rev,
         				py.py_consumer_rev,
         				b.cs_budget,
         				(AVG(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders,
         				m.avg_full_weighted_margin * 100 as avg_full_weighted_margin
			FROM      	magento.sales_flat_order o
			LEFT JOIN	(SELECT		DAYOFYEAR(DATE(o.created_at)) as day_of_year,
									DATE(o.created_at) AS DATE,
         							SUM(o.base_subtotal + o.base_shipping_amount - abs(o.base_discount_amount - o.base_gift_cards_amount)) * 0.97 AS py_consumer_rev
						FROM      	magento.sales_flat_order o
						LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
						WHERE     	DATE(o.created_at) = DATE_SUB(CURDATE() - 1, INTERVAL 365 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 1
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(DATE(o.created_at))
			LEFT JOIN	(SELECT		DATE(soia.period) as date,
									AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	 
						FROM 		magento.sales_order_item_aggregated soia
						JOIN		magento.catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM magento.purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	magento.purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	magento.purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	magento.shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) = CURDATE() - 1
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date) m ON m.date = DATE(o.created_at)
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			WHERE     	DATE(o.created_at) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 1
			GROUP BY  	DATE) d</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						m.brand_name,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN '2017-03-01' AND '2017-03-31'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month, m.brand_name
			ORDER BY	rev DESC</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						m.brand_name,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) BETWEEN '2017-03-01' AND '2017-03-31'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						m.brand_name,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2018-03-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month, m.brand_name
			ORDER BY	rev DESC</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						m.brand_name,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2018-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month, m.brand_name</string>
		<string>SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2018-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2018-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month</string>
		<string>SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						#AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month)mm</string>
		<string>SELECT Date(convert_tz(created_at,'UTC','America/New_York')) as date,
       SUBSTRING(name,1,LOCATE(':',name)-1) as name,
       base_price,
       COUNT(DISTINCT order_id) as orders,
       sum(IF(product_type = 'Simple', qty_ordered, 0)) as units,
       sum(base_price * qty_ordered) as revenue
FROM   sales_flat_order_item
WHERE  SUBSTRING(name,1,LOCATE(':',name)-1) LIKE '%levears%'
AND    DATE(convert_tz(created_at,'UTC','America/New_York')) = '2018-03-28'
AND    store_id = 1
GROUP BY date</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						LEFT JOIN	sales_flat_order so ON so.entity_id = soia.order_id
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = so.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = soia.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null) /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						LEFT JOIN	frauddetection_order_assessment f ON f.order_id = soia.entity_id /* fraud filter */
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						AND			(f.severity != 9 or f.severity is null)) t /* 9 = fraud */
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku</string>
		<string>SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty_ordered * cpf.price) as rev,
									SUM(soia.qty_ordered * cpf.cost) as cost,
									SUM(soia.qty_ordered) as qty,
									SUM(((cpf.cost * soia.qty_ordered) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month)mm</string>
		<string>SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	date(soia.created_at) as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(soia.qty) as qty,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.created_at) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month)mm</string>
		<string>SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(soia.qty) as qty,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_flat_order_item soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month)mm</string>
		<string>SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts,
						SUM(m.qty) as qty
			FROM		(SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(soia.qty) as qty,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month</string>
		<string>SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(soia.qty) as qty,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku</string>
		<string>SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						AND			cpf.brand_name LIKE '%negg%'
						Group BY  	date, cpf.sku</string>
		<string>SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date, cpf.sku</string>
		<string>SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									SUM(((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100))) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date, cpf.sku)</string>
		<string>SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									SUM(soia.qty * cpf.price) as rev,
									SUM(soia.qty * cpf.cost) as cost,
									((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date, cpf.sku</string>
		<string>SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									soia.qty * cpf.price as rev,
									soia.qty * cpf.cost as cost,
									((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date, cpf.sku</string>
		<string>SELECT  	year(soia.period) as year,		
			month(soia.period) as month,
			SUM(soia.qty * cpf.price) as rev,
			SUM(soia.qty * cpf.cost) as ful_cogs,
			((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discount,
			(cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discounted_cost,
			AVG((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100)) as avg_discounted_cost,
			(soia.qty * cpf.price) as rev,
			AVG((soia.qty * cpf.price)) as rev,
		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,	
		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */	
		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	
FROM 		sales_order_item_aggregated soia	
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id	
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/		
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */		
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */		
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/		
WHERE 		year(soia.period) &gt;= 2016 	
AND  		cpf.type_id = 'Simple'	
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT  	YEAR(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_year,
			MONTH(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_month,
			ROUND(SUM(si.qty * cpf.price),2) as rev,
			ROUND(SUM(si.qty * cpf.cost),2) as cogs,
        	ROUND(1-(SUM(si.qty * cpf.cost)/SUM(si.qty * cpf.price)),2) as avg_product_margin
FROM      	sales_flat_shipment_item si
LEFT JOIN 	sales_flat_shipment s ON s.entity_id = si.parent_id
LEFT JOIN	catalog_product_flat_3 cpf ON cpf.entity_id = si.product_id
WHERE 		CONVERT_TZ(s.created_at,'UTC','America/New_York') BETWEEN '2017-01-01' AND '2017-10-31'
AND   		s.store_id = 3
AND			cpf.type_id = 'simple'
GROUP BY 	shipment_year, shipment_month</string>
		<string>#New Launch Rev Rolling 30 Days
SELECT		week(convert_tz(created_at,'UTC','America/New_York')) as week,
			ROUND(SUM(CASE WHEN date(created_at) BETWEEN t.launch_date AND DATE_ADD(t.launch_date, INTERVAL 29 DAY) THEN base_price * qty_ordered ELSE 0 END),0) as 30_day_launch_revenue
FROM		sales_flat_order_item si
LEFT JOIN   (SELECT     SUBSTRING(cpf.sku,1,LOCATE('-', cpf.sku)-1) as sku_prefix,
                    	SUBSTRING(cpf.name,1,LOCATE(':',cpf.name)-1) AS grom_prefix,
                    	CASE WHEN DATE(min(cpf.news_from_date)) IS NULL THEN date(cpf.launch_date) ELSE DATE(min(cpf.news_from_date)) END AS launch_date           
            FROM     	catalog_product_flat_1 cpf
           	WHERE    	cpf.type_id = 'grouped'
            GROUP BY 	sku_prefix) t ON t.sku_prefix = SUBSTRING(si.sku,1,LOCATE('-', si.sku)-1)  /* Original Launch Date w/o updates */
WHERE 		t.launch_date &gt;= '2018-01-01'
AND			store_id = 1
GROUP BY	week
#WHERE 		date &gt;= curdate() - INTERVAL DAYOFWEEK(curdate())+6 DAY
#AND 		date &lt; curdate() - INTERVAL DAYOFWEEK(curdate())-1 DAY</string>
		<string>SELECT  	year(soia.period) as year,
			month(soia.period) as month,
			SUM(soia.qty * cpf.price) as rev,
			SUM(soia.qty * cpf.cost) as ful_cogs,
			((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discount,
			(cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discounted_cost,
			AVG((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100)) as avg_discounted_cost,
			(soia.qty * cpf.price) as rev,
			AVG((soia.qty * cpf.price)) as rev,
       		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	  
FROM 		sales_order_item_aggregated soia
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
WHERE 		year(soia.period) &gt;= 2016 
AND  		cpf.type_id = 'Simple'
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT  	year(soia.period) as year,
			month(soia.period) as month,
			SUM(soia.qty * cpf.price) as rev,
			SUM(soia.qty * cpf.cost) as ful_cogs,
			((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discount,
			(cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discounted_cost,
			(soia.qty * cpf.price) as rev,
			
       		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	  
FROM 		sales_order_item_aggregated soia
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
WHERE 		year(soia.period) &gt;= 2016 
AND  		cpf.type_id = 'Simple'
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT  	year(soia.period) as year,
			month(soia.period) as month,
			SUM(soia.qty * cpf.price) as rev,
			SUM(soia.qty * cpf.cost) as ful_cogs,
			((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discount,
			(cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discounted_cost,
			
       		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	  
FROM 		sales_order_item_aggregated soia
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
WHERE 		year(soia.period) &gt;= 2016 
AND  		cpf.type_id = 'Simple'
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT  	year(soia.period) as year,
			month(soia.period) as month,
			SUM(soia.qty * cpf.price) as rev,
			SUM(soia.qty * cpf.cost) as ful_cogs,
			((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) as discount,
			
       		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	  
FROM 		sales_order_item_aggregated soia
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
WHERE 		year(soia.period) &gt;= 2016 
AND  		cpf.type_id = 'Simple'
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT  	year(soia.period) as year,
			month(soia.period) as month,
			SUM(soia.qty * cpf.price) as rev,
			SUM(soia.qty * cpf.cost) as cogs,
			
       		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	  
FROM 		sales_order_item_aggregated soia
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
WHERE 		year(soia.period) &gt;= 2016 
AND  		cpf.type_id = 'Simple'
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT  	year(soia.period) as year,
			month(soia.period) as month,
       		ROUND(AVG(((soia.qty * cpf.price) - (soia.qty * cpf.cost))/(soia.qty * cpf.price)),4) as margin,
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0)))/100) / (soia.qty * cpf.price))), 4) as weighted_margin, /* average margin including media allowance */
       		ROUND(AVG(1-((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)/(soia.qty * cpf.price))), 4) as avg_full_weighted_margin /* average margin including media allowance, return allowance and early pmt disc*/	  
FROM 		sales_order_item_aggregated soia
JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
WHERE 		year(soia.period) &gt;= 2016 
AND  		cpf.type_id = 'Simple'
AND			soia.store_id = 1
Group BY  	year, month</string>
		<string>SELECT		mm.year,
			mm.month,
			ROUND((1-(mm.cost/mm.rev))*100,2) as product_margin,
			ROUND((1-(mm.cost_w_discounts/mm.rev))*100,2) as weighted_margin
FROM		(SELECT		YEAR(m.date) as year,
						MONTH(m.date) as month,
						SUM(m.rev) as rev,
						SUM(m.cost) as cost,
						SUM(m.cost_w_discounts) as cost_w_discounts
			FROM		(SELECT  	soia.period as date,
									cpf.sku,
									cpf.brand_name,
									soia.qty * cpf.price as rev,
									soia.qty * cpf.cost as cost,
									((cpf.cost * soia.qty) * ((100-(IF(cpf.shipwire_vendor_id = 666, ps.terms_media_allowance, sv.terms_retail_media_allowance) + IF(cpf.shipwire_vendor_id = 666, ps.terms_return_discount_allowance, 0) + IF(cpf.shipwire_vendor_id = 666, ps.terms_early_discount, 0)))/100)) as cost_w_discounts
						FROM 		sales_order_item_aggregated soia
						JOIN		catalog_product_flat_1 cpf ON cpf.entity_id = soia.product_id
						LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
						LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
						LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
						LEFT JOIN  	shipwire_vendor sv ON sv.vendor_id = cpf.shipwire_vendor_id /* Dropship Vendors*/
						WHERE 		date(soia.period) &gt;= '2017-01-01'
						AND  		cpf.type_id = 'Simple'
						AND			soia.store_id = 1
						Group BY  	date, cpf.sku) m
			GROUP BY	year, month)mm</string>
		<string>SELECT  	YEAR(CONVERT_TZ(si.created_at,'UTC','America/New_York')) as order_year,
			MONTH(CONVERT_TZ(si.created_at,'UTC','America/New_York')) as order_month,
        	ROUND(AVG(1-(IF(IF(cpf.shipwire_vendor_id = 666, (ps.terms_media_allowance + ps.terms_return_discount_allowance), sv.terms_retail_media_allowance) &gt; 0, cpf.cost * ((100-IF(cpf.shipwire_vendor_id = 666, (ps.terms_media_allowance + ps.terms_return_discount_allowance), sv.terms_retail_media_allowance))/100), cpf.cost)/cpf.price)),4) as weighted_margin
FROM		sales_flat_order_item si
LEFT JOIN	catalog_product_flat_1 cpf ON cpf.entity_id = si.product_id
LEFT JOIN  	(SELECT * FROM purchasing_case_link GROUP BY product_id) pcl ON pcl.product_id = cpf.entity_id /* purchasing sku*/
LEFT JOIN  	purchasing_case pc ON pc.case_id = pcl.case_id /* Case link */
LEFT JOIN  	purchasing_supplier ps ON ps.supplier_id = pc.supplier_id /* Supplier Info */
LEFT JOIN	shipwire_vendor sv ON sv.vendor_id = si.shipwire_vendor_id
WHERE 		CONVERT_TZ(si.created_at,'UTC','America/New_York') BETWEEN '2018-01-01' AND '2018-03-31'
AND   		si.store_id = 1
GROUP BY 	order_year, order_month</string>
		<string>SELECT  	YEAR(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_year,
			MONTH(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_month,
			ROUND(SUM(si.qty * cpf.price),2) as rev,
			ROUND(SUM(si.qty * cpf.cost),2) as cogs,
        	ROUND(1-(SUM(si.qty * cpf.cost)/SUM(si.qty * cpf.price)),4) as avg_product_margin
FROM      	sales_flat_shipment_item si
LEFT JOIN 	sales_flat_shipment s ON s.entity_id = si.parent_id
LEFT JOIN	catalog_product_flat_3 cpf ON cpf.entity_id = si.product_id
WHERE 		CONVERT_TZ(s.created_at,'UTC','America/New_York') BETWEEN '2018-01-01' AND '2018-03-31'
AND   		s.store_id = 3
AND			cpf.type_id = 'simple'
GROUP BY 	shipment_year, shipment_month</string>
		<string>SELECT  	YEAR(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_year,
			MONTH(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_month,
			ROUND(SUM(si.qty * cpf.price),2) as rev,
			ROUND(SUM(si.qty * cpf.cost),2) as cogs,
        	ROUND(1-(SUM(si.qty * cpf.cost)/SUM(si.qty * cpf.price)),2) as avg_product_margin
FROM      	sales_flat_shipment_item si
LEFT JOIN 	sales_flat_shipment s ON s.entity_id = si.parent_id
LEFT JOIN	catalog_product_flat_3 cpf ON cpf.entity_id = si.product_id
WHERE 		CONVERT_TZ(s.created_at,'UTC','America/New_York') BETWEEN '2018-01-01' AND '2018-03-31'
AND   		s.store_id = 3
AND			cpf.type_id = 'simple'
GROUP BY 	shipment_year, shipment_month</string>
		<string>SELECT  	YEAR(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_year,
			MONTH(CONVERT_TZ(s.created_at,'UTC','America/New_York')) as shipment_month,
        	ROUND(AVG(1-(cpf.cost/cpf.price)),2) as avg_product_margin
FROM      	sales_flat_shipment_item si
LEFT JOIN 	sales_flat_shipment s ON s.entity_id = si.parent_id
LEFT JOIN	catalog_product_flat_3 cpf ON cpf.entity_id = si.product_id
WHERE 		CONVERT_TZ(s.created_at,'UTC','America/New_York') BETWEEN '2018-01-01' AND '2018-03-31'
AND   		s.store_id = 3
GROUP BY 	shipment_year, shipment_month</string>
		<string>#Wholesale Summary - MTD -- NOT DONE 
SELECT		d.year,
			d.month,
			CONCAT('$',FORMAT(d.wholesale_rev,0)) as wholesale_rev,
			CONCAT(FORMAT(((d.wholesale_rev - d.py_wholesale_rev) / d.py_wholesale_rev) * 100, 2),'%') as YOY,
			CONCAT('$',FORMAT(d.ws_budget,0)) as wholesale_budget,
			CONCAT(FORMAT(((d.wholesale_rev / d.ws_budget) - 1) * 100,2),'%') as percent_of_budget,
			CONCAT('$',FORMAT(d.net_aov,2)) as aov,
			FORMAT(d.orders,0) as orders
FROM 		(SELECT    	YEAR(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as year,
						month(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as month,
         				SUM(i.grand_total) AS wholesale_rev,
         				py.py_wholesale_rev,
         				b.ws_budget as ws_budget,
         				AVG(i.grand_total) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_invoice i
			LEFT JOIN 	magento.sales_flat_order o ON i.order_id = o.entity_id
			LEFT JOIN 	magento.sales_payment_transaction t ON t.order_id = o.entity_id
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at))
			LEFT JOIN	(SELECT		YEAR(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as year,
									Month(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as month,
         							SUM(i.grand_total) AS py_wholesale_rev
						FROM 		magento.sales_flat_invoice i
						LEFT JOIN   magento.sales_flat_order o ON i.order_id = o.entity_id
						LEFT JOIN 	magento.sales_payment_transaction t ON t.order_id = o.entity_id
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* fraud filter */
						WHERE     	DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 366 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 366 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 3
						GROUP BY  	month, year) py ON py.month = Month(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) 
			WHERE 		date(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) BETWEEN DATE_FORMAT(CURDATE()-1,'%Y-%m-01') AND CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 3
			GROUP BY  	month, year) d</string>
		<string>SELECT		YEAR(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as year,
									Month(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as month,
         							SUM(i.grand_total) AS py_wholesale_rev
						FROM 		magento.sales_flat_invoice i
						LEFT JOIN   magento.sales_flat_order o ON i.order_id = o.entity_id
						LEFT JOIN 	magento.sales_payment_transaction t ON t.order_id = o.entity_id
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* fraud filter */
						WHERE     	DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) BETWEEN DATE_FORMAT(DATE_SUB(CURDATE()-1, INTERVAL 366 DAY),'%Y-%m-01') AND DATE_SUB(CURDATE()-1, INTERVAL 366 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 3
						GROUP BY  	month, year</string>
		<string>#Wholesale Summary - Daily -- NOT DONE Rev is way too low
SELECT		d.date,
			CONCAT('$',FORMAT(d.wholesale_rev,0)) as wholesale_rev,
			CONCAT(FORMAT(((d.wholesale_rev - d.py_wholesale_rev) / d.py_wholesale_rev) * 100, 2),'%') as YOY,
			CONCAT('$',FORMAT(d.ws_budget,0)) as wholesale_budget,
			CONCAT(FORMAT(((d.wholesale_rev / d.ws_budget) - 1) * 100,2),'%') as percent_of_budget,
			CONCAT('$',FORMAT(d.net_aov,2)) as aov,
			FORMAT(d.orders,0) as orders
FROM 		(SELECT    	DAYOFYEAR(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as day_of_year,
						DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as date,
         				SUM(i.grand_total) AS wholesale_rev,
         				py.py_wholesale_rev,
         				b.ws_budget,
         				AVG(i.grand_total) AS net_aov,
         				COUNT(DISTINCT o.entity_id) as orders
			FROM      	magento.sales_flat_invoice i
			LEFT JOIN 	magento.sales_flat_order o ON i.order_id = o.entity_id
			LEFT JOIN 	magento.sales_payment_transaction t ON t.order_id = o.entity_id
			LEFT JOIN 	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* Fraud Filter */
			LEFT JOIN	2018_daily_budget b ON b.budget_date = DATE(o.created_at)
			LEFT JOIN	(SELECT		DAYOFYEAR(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as day_of_year,
									DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) as date,
									date(t.created_at) as transaction_date,
									date(i.created_at) as invoice_date,
         							SUM(i.grand_total) AS py_wholesale_rev
						FROM 		magento.sales_flat_invoice i
						LEFT JOIN   magento.sales_flat_order o ON i.order_id = o.entity_id
						LEFT JOIN 	magento.sales_payment_transaction t ON t.order_id = o.entity_id
						LEFT JOIN	magento.frauddetection_order_assessment f ON f.order_id = o.entity_id /* fraud filter */
						WHERE     	DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) = DATE_SUB(CURDATE(), INTERVAL 366 DAY)
						AND  		(f.severity !=9 or f.severity is null)
						AND			o.status != 'canceled'
						AND			o.store_id = 3
						GROUP BY  	DATE) py ON py.day_of_year = DAYOFYEAR(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at))
			WHERE     	DATE(IF(((i.grand_total = 0) AND Isnull(t.created_at)), i.created_at, t.created_at)) = CURDATE() - 1
			AND  		(f.severity !=9 or f.severity is null)
			AND			o.status != 'canceled'
			AND			o.store_id = 3
			GROUP BY  	DATE) d</string>
		<string>SELECT		DATE(t.revenue_recognized_at) as DATE,
			SUM(t.grand_total) as rev
FROM		(SELECT		o.increment_id AS `order_id`,
			CONVERT_TZ(o.created_at,'UTC','America/New_York') AS `order_created_at (Eastern)`,
			i.increment_id AS `invoice_id`,
			o.status,
			CONVERT_TZ(i.created_at,'UTC','America/New_York') AS `invoice_created_at (Eastern)`,
			IF(p.`method`='wholesale_terms' AND p.`additional_information` LIKE '%prepaid%', CONCAT(p.`method`, '_prepaid'), p.`method`) AS `payment_method`,
			i.subtotal,
			i.shipping_amount,
			i.tax_amount,
			i.discount_amount,
			i.grand_total,
			CONVERT_TZ(o.paid_at,'UTC','America/New_York') AS `paid_at (Eastern)`,
			IF(p.`method`='wholesale_terms' AND p.`additional_information` NOT LIKE '%prepaid%', CONVERT_TZ(i.created_at,'UTC','America/New_York'), CONVERT_TZ(o.paid_at,'UTC','America/New_York')) AS `revenue_recognized_at`
FROM 		sales_flat_invoice i
JOIN 		sales_flat_order o ON i.order_id = o.entity_id
LEFT JOIN 	sales_flat_order_payment p ON p.parent_id = o.entity_id
LEFT JOIN	frauddetection_order_assessment f ON f.order_id = o.entity_id /* fraud filter */
WHERE 		i.state != 3 /* 3 = cancelled */
AND 		(o.status != "canceled" or o.status != 'holded')
AND 		i.store_id = 3 /* 3 = wholesale */
AND			(f.severity != 9 or f.severity is null)) t /* 9 = fraud */
WHERE		DATE(t.revenue_recognized_at) = '2018-03-28'
GROUP BY 	DATE
ORDER BY	DATE ASC</string>
		<string>SELECT		DATE(t.revenue_recognized_at) as DATE,
			SUM(t.grand_total) as rev
FROM		(SELECT		o.increment_id AS `order_id`,
			CONVERT_TZ(o.created_at,'UTC','America/New_York') AS `order_created_at (Eastern)`,
			i.increment_id AS `invoice_id`,
			o.status,
			CONVERT_TZ(i.created_at,'UTC','America/New_York') AS `invoice_created_at (Eastern)`,
			IF(p.`method`='wholesale_terms' AND p.`additional_information` LIKE '%prepaid%', CONCAT(p.`method`, '_prepaid'), p.`method`) AS `payment_method`,
			i.subtotal,
			i.shipping_amount,
			i.tax_amount,
			i.discount_amount,
			i.grand_total,
			CONVERT_TZ(o.paid_at,'UTC','America/New_York') AS `paid_at (Eastern)`,
			IF(p.`method`='wholesale_terms' AND p.`additional_information` NOT LIKE '%prepaid%', CONVERT_TZ(i.created_at,'UTC','America/New_York'), CONVERT_TZ(o.paid_at,'UTC','America/New_York')) AS `revenue_recognized_at`
FROM 		sales_flat_invoice i
JOIN 		sales_flat_order o ON i.order_id = o.entity_id
LEFT JOIN 	sales_flat_order_payment p ON p.parent_id = o.entity_id
LEFT JOIN	frauddetection_order_assessment f ON f.order_id = o.entity_id /* fraud filter */
WHERE 		i.state != 3 /* 3 = cancelled */
AND 		(o.status != "canceled" or o.status != 'holded')
AND 		i.store_id = 3 /* 3 = wholesale */
AND			(f.severity != 9 or f.severity is null)) t /* 9 = fraud */
WHERE		DATE(t.revenue_recognized_at) = '2017-03-28'
GROUP BY 	DATE
ORDER BY	DATE ASC</string>
		<string>SELECT		DATE(t.revenue_recognized_at) as DATE,
			SUM(t.grand_total) as rev
FROM		(SELECT		o.increment_id AS `order_id`,
			CONVERT_TZ(o.created_at,'UTC','America/New_York') AS `order_created_at (Eastern)`,
			i.increment_id AS `invoice_id`,
			o.status,
			CONVERT_TZ(i.created_at,'UTC','America/New_York') AS `invoice_created_at (Eastern)`,
			IF(p.`method`='wholesale_terms' AND p.`additional_information` LIKE '%prepaid%', CONCAT(p.`method`, '_prepaid'), p.`method`) AS `payment_method`,
			i.subtotal,
			i.shipping_amount,
			i.tax_amount,
			i.discount_amount,
			i.grand_total,
			CONVERT_TZ(o.paid_at,'UTC','America/New_York') AS `paid_at (Eastern)`,
			IF(p.`method`='wholesale_terms' AND p.`additional_information` NOT LIKE '%prepaid%', CONVERT_TZ(i.created_at,'UTC','America/New_York'), CONVERT_TZ(o.paid_at,'UTC','America/New_York')) AS `revenue_recognized_at`
FROM 		sales_flat_invoice i
JOIN 		sales_flat_order o ON i.order_id = o.entity_id
LEFT JOIN 	sales_flat_order_payment p ON p.parent_id = o.entity_id
LEFT JOIN	frauddetection_order_assessment f ON f.order_id = o.entity_id /* fraud filter */
WHERE 		i.state != 3 /* 3 = cancelled */
AND 		(o.status != "canceled" or o.status != 'holded')
AND 		i.store_id = 3 /* 3 = wholesale */
AND			(f.severity != 9 or f.severity is null)) t /* 9 = fraud */
WHERE		DATE(t.revenue_recognized_at) = '2018=7-03-28'
GROUP BY 	DATE
ORDER BY	DATE ASC</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.5.5-10.2.11-MariaDB</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
